service: lambda-nodejs-sqlite3-efs

provider:
  architecture: x86_64
  name: aws
  memorySize: 128
  runtime: nodejs16.x
  region: us-east-1
  timeout: 7
  logRetentionInDays: 3
  iam:
    role:
      statements:
        # Allow functions to mount, write and gives root access
        - Effect: Allow
          Action: 
            - 'elasticfilesystem:ClientMount'
            - 'elasticfilesystem:ClientWrite'
          Resource: ${ssm:/lambda-nodejs-sqlite3-efs/default/EFS_ARN}
        # Allow connection to elastiCache
        - Effect: Allow
          Action: 
            - 'elasticache:Connect'
          Resource: ${ssm:/lambda-nodejs-sqlite3-efs/default/ELASTICACHE_ARN}
  vpc:
    securityGroupIds: ${ssm:/lambda-nodejs-sqlite3-efs/default/VPC_SG_IDS}
    subnetIds: ${ssm:/lambda-nodejs-sqlite3-efs/default/VPC_SUBNET_IDS}
  environment:
    AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
    RUST_LOG: info
    NODE_ENV: production
    DATABASE_PATH: /mnt/volume/users.db
    REDIS_URL: ${ssm:/lambda-nodejs-sqlite3-efs/default/REDIS_URL}
    # DEBUG: "ioredis:*"

package:
  patterns:
    - '!./**'
    - ./node_modules/**
    - ./src/**
    - ./run.sh

functions:
  api:
    handler: run.sh
    fileSystemConfig:
      localMountPath: /mnt/volume
      arn: ${ssm:/lambda-nodejs-sqlite3-efs/default/EFS_AP_ARN}
    layers:
      - arn:aws:lambda:${self:provider.region}:753240598075:layer:LambdaAdapterLayerX86:13
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{proxy+}
          method: ANY
        
